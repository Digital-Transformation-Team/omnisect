import datetime
import os

from docxtpl import DocxTemplate

from plugins.core.iplugin import IPlugin
from plugins.models import Meta, PluginInput, PluginOutput, PluginServices
from plugins.plugins.syllabus_weaver import models


class SyllabusWeaver(IPlugin):
    def __init__(self, logger, plugin_services: PluginServices):
        super().__init__(logger, plugin_services)
        self.prompts = {}
        self.faq_data = {}
        self.meta = Meta(
            name="Syllabus Weaver",
            description="syllabus-weaver",
            version="0.0.1",
            # must be generated by https://shortunique.id/ service
            # todo: resolve plugin id consistency problem
            web_id="OZEj31Pr5CQaUmOxE0YYLFOmpQ7aUWeV",
        )

    def invoke(self, inp: PluginInput):
        context = models.CourseContext(**inp.data)
        doc_name = self._generate_syllabus(context=context)
        return PluginOutput(file_path=f"/{doc_name}")

    def _generate_syllabus(self, context: models.CourseContext):
        base_dir = os.path.abspath(
            os.path.join(os.path.dirname(__file__), "..", "..", "..")
        )
        # TODO: default template must be inside app config
        templates_dir = os.path.join(
            base_dir, "plugins", "plugins", "syllabus_weaver", "templates"
        )
        outputs_dir = os.path.join(base_dir, "files")

        os.makedirs(outputs_dir, exist_ok=True)
        # TODO: Generate on all 3 languages
        doc_name = f"{context.course_code}_{datetime.datetime.now().isoformat(timespec='seconds')}_eng.docx"
        # TODO: Template name must be inside config or as plugin prop
        tmplt = DocxTemplate(os.path.join(templates_dir, "eng.docx"))
        tmplt.render(context.model_dump())

        output_path = os.path.join(outputs_dir, doc_name)
        tmplt.save(output_path)

        return output_path
